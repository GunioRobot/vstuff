

[00:50] <fsck> - una breve introduzione a come caricare i moduli, attivare le interfacce
[00:50] <fsck> - una breve intro a chan_visdn
[00:50] <fsck> - la faccenda del crash (che da una cattiva impressione, visto che al primo colpo uno dimentica qualcosa :)
[00:51] <fsck> - un buildscript anche molto rozzo, che faccia aclocal/automake/autoconf e i make necessari


[01:18] <fsck> uhm l'ecocancel?
[01:19] <vihai> E' da configurare per ogni interfaccia? In che casi non va messo?
[01:20] <fsck> quando quell'interfaccia non è al margine di una rete tutta digitale è inutile
[01:20] <fsck> la segnalazione
[01:20] <fsck> o meglio la "variante" della segnalazione
[01:21] <vihai> Non faccio prima a vedere se il canale connesso è digiale o meno e abilitare l'echo cancel dinamicamente?
[01:21] <fsck> come fai a sapere se il canale a valle è digitale o meno?
[01:21] <fsck> e soprattutto se lui fa l'ecocancel
[01:22] <vihai> C'è un flag in *, devo vedere se è fatto apposta
[01:23] <fsck> quello della digital quality?
[01:23] <fsck> se è quello è per settare l'ec PER CALL
[01:23] <vihai> Comunqu posso fare un (yes, no, auto) 
[01:23] <vihai> AST_FLAG_DIGITAL
[01:23] <fsck> si è quello
[01:23] <fsck> le chiamate fax non vogliono l'ec
[01:24] <fsck> io metterei un flag



[14:19] <vihai> Allora... ragiono a voce alta... tu fai segno con la testa se va bene
[14:19] <vihai> Io ricevo un setup_indication dalla libq931 (ovvero ho ricevuto un SETUP)
[14:20] <vihai> Nel setup_indication c'è un numero valido, overlap dialing è disattivato, io lancio il pbx e finisco mandando un proceeding
[14:20] <vihai> Se il numero non è completo/invalito, rispondo con un setup_reject
[14:21] <fsck> ok
[14:22] <vihai> Se l'overlap è abilitato guardo se il numero PUO' matchare
[14:22] <vihai> Se non puo' matchare => reject
[14:22] <vihai> Finché può matchare continuo l'overlap
[14:22] <vihai> Quando il numero matcha un'estensione (che può essere una regexp) devo guardare se l'estensione supporta l'overlap
[14:23] <vihai> Se lo supporta faccio partire il pbx e mando il resto delle cifre come frame DTMF
[14:24] <vihai> Se non lo supporta uso un timeout
[14:24] <vihai> Il problema è... come capisco se l'estensione supporta l'overlap dialing?
[14:26] <fsck> mhh... non credo ci sia un modo adesso
[14:29] <vihai> Uhm... allora....
[14:30] <vihai> Posso fare che se durante l'overlap esiste un'estensione e NON può matchare ulteriormente (ovvero non è una regexp) faccio partire subito il pbx
[14:30] <vihai> Se invece esiste e può matchare ulteriormente uso il timeout
[14:31] <vihai> Però cacchio.... così impongo il timeout anche facendo l'overlap solo su ISDN
[14:32] <fsck> uno switch a mano per ora?
[14:33] <vihai> Per dire cosa? Attivare/disattivare i DTMF frame?
[14:34] <fsck> per dire "questa estensione supporta l'overlap"
[14:36] <vihai> Dentro la configurazione di visdn?
[14:37] <fsck> eh no dentro extensions.conf



General:

- Fix all copyright notices and file headers
- Check what headers/parts should be included by user-mode programs (#ifdef KERNEL)
- Correctly implement automake/autoconf/libtool for every subsystem
- Check all input data in ioctls/setsockopt for security bugs


chan_visdn

- Implement contexts in visdn.conf
- Implement groups in visdn.conf
- Fix/complete Progress indicators to notify interworking with non-ISDN


libq931

- Fix hangup after T312 expiration in multipoint links

- Implement: 5.9 User notification procedure

- Restart Procedure is completely untested, test it.

- ECT (explicit call transfer) (ETS 300 369-1) (367, 368, 369)


visdn_core

- Complete PPP support


lapd/netdev

- There is a deadlock/race condition on modules removal when an application
  has an open socket and doesn't exit immediately

- Implement point-to-point and static TEIs

- Implement automatic TEI check for TEIs that are presumably unused and could
  be released

- Implement SOCK_RAW sockets (?)

- DL_DATA-REQUEST in AWAITING shoud put the frame in queue

- Lock accesses to TME and make tei atomic_t  (?)

- Implement socket closure after timeout and T203

- Implement listen backlog maximum size

- Implement frame acknowledging throught outgoing i-frames instead of specific RR

- Indagate whether it is possiblle to strictly serialize frames coming from the
  same device (and thus going to the same socket). Currently netif_rx spreads the
  load on per-CPU queues and frames may get analyzed concurrently.

- Check what happens when 64 sockets are open (every dynamic TEIs)

- Should we add incoming interface, interface role and packet_type to ethereal's
  frame?

- Add lapd_ptr to struct net_device. Currently we're using atalk_ptr and it is
  safe, since ISDN interfaces will never run AppleTalk, however it is an ugly
  hack and should be fixed.

- Add AF_LAPD to linux/include/linux/socket.h
- Add PF_LAPD to linux/include/linux/socket.h
- Add SOL_LAPD to linux/inclode/linx/socket.h ????

- Add ARPHRD_LAPD to linux/include/linux/if_arp.h
- Add ETH_P_LAPD to linux/include/linux/if_ether.h
- See ioctl-number.txt and mail <mec@shout.net> and register an IOCTL number

- The interface role (in the ISDN network) is determined by the IFF_ALLMULTI flag.
  - A specific flag would be better.

- Implement E-channel sniffing

hfc-4s

- We may be able to avoid interrupt disabling in hfc-4s by removing every
  hardware access from the interrupt handler and serializing accesses to
  hardware with semaphores.

- Implement E-channel sniffing


