
General:
--------

- Check what headers/parts should be included by user-mode programs (#ifdef KERNEL)
- Check all input data in ioctls/setsockopt for security bugs
- Document functions (with doxygen?)
- Create a libvisdn for channel manipulation functions?

Build system:
-------------

- Avoid libtool to install chan_visdn.a, chan_visdn.la, run ldconfig and complain
  about non-standard directory location
- Avoid modpost complaining about undefined symbols in other modules
- Conditionally build kfifo!

chan_visdn:
-----------

- Implement groups in visdn.conf
- Fix/complete Progress indicators to notify interworking with non-ISDN
- Fix autocompletion in cli commands
- Implement "allowed_caller_ids" which may eventually replace
  force_inbound_caller_id
- MWI on ISDN phones
- Asterisk's design makes difficult to implement some sort of parameter negotiation
  so it is impossible to know what bearer capabilities are accepted by a
  destination, if it supports overlap dialing and so on...
- Call bumbing
- Handle ULAW
- Handle caller id presentation informations

- Call parking (SUSPEND/RESUME) does not use the call parking "infrastructure"
  in Asterisk. All my attempts to use ast_park_call() failed as:

  1- We need to respond to a suspend_indication in no more than 4 seconds, thus
     we may not have enough time to play the parking number by voice. The
     standard seems to prevent announcements between SUSPEND and SUSPEND ACK.

  2- Some phone even ignores the Display information element, so the user is
     not able to know where his call has been parked.

  3- ast_park_call() does sleep when saying the numbers, if we make it sleep
     in another thread we have problems getting back the parking number

  4- Since we don't release the B channel associated with the call we need
     to know if the remote user cleared the call or the call has been picked
     up by a non-vISDN channel. No provision exists in * to notify other
     channel drivers for such events.

libq931:
--------

- Restart Procedure is completely untested, test it.
- ECT (explicit call transfer) (ETS 300 369-1) (367, 368, 369)
- Call bumbing
- Implement Called/Calling party subaddress IE
- Implement Congestion level IE
- Implement Keypad facility IE
- Implement Low layer compatibility IE
- Implement More Data IE (?)
- Implement Network-specific facilities IE
- Implement Repeat Indicator IE
- Implement Segmented Message IE (?)
- Implement Signal IE
- Implement Transit Network Selection IE
- Implement User-User Information IE
- Implement ETS 300 125 Appendix III (Optional basic access deactivation procedures)

app_visdn_ppp:
--------------

- Handle hangup

timer:
------

- Add open/release functions to disable the timer when no users are using it

visdn_core:
-----------

- Channel bundling
- Allocate a single major number for control devices?

lapd:
-----

- Implement point-to-point and static TEIs

- Implement automatic TEI check for TEIs that are presumably unused and could
  be released

- When allmulti flag is changed while the interface is UP, Tei Mgmt entities
  are not release/allocated correctly. The interface needs to be put down and
  than up to make it work

- Implement SOCK_RAW sockets (?)

- Implement listen backlog maximum size

- Implement frame acknowledging throught outgoing i-frames instead of specific RR

- Indagate whether it is possiblle to strictly serialize frames coming from the
  same device (and thus going to the same socket). Currently netif_rx spreads the
  load on per-CPU queues and frames may get analyzed concurrently.

- Check what happens when 64 sockets are open (every dynamic TEIs)

- Should we add incoming interface, interface role and packet_type to ethereal's
  frame?

- Add lapd_ptr to struct net_device. Currently we're using atalk_ptr and it is
  safe, since ISDN interfaces will never run AppleTalk, however it is an ugly
  hack and should be fixed.

- Add AF_LAPD to linux/include/linux/socket.h
- Add PF_LAPD to linux/include/linux/socket.h
- Add SOL_LAPD to linux/inclode/linx/socket.h ????

- Add ARPHRD_LAPD to linux/include/linux/if_arp.h
- Add ETH_P_LAPD to linux/include/linux/if_ether.h
- See ioctl-number.txt and mail <mec@shout.net> and register an IOCTL numbers

- The interface role (in the ISDN network) is determined by the IFF_ALLMULTI flag, a specific flag would be better.

- Implement ETS 300 125 Appendix III (Optional basic access deactivation procedures)


visdn-netdev:
-------------

- Reallocate channel ID from the beginning instead of incrementing every time

visdn-ppp:
----------

- Handle MTU
- Reallocate channel ID from the beginning instead of incrementing every time

visdn-streamport:
-----------------

- Reallocate channel ID from the beginning instead of incrementing every time

hfc-4s:
-------

- Finish PCM bus support
- Use memcpy_toio

hfc-pci:
-------

- Finish PCM bus support

hfc-e1:
-------

- Rewrite using new model

hfc-usb:
--------

- Rewrite using new model
