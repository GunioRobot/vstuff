#! /bin/sh
# Copyright (c) 2004 Lele Forzani, Windmill Media, <lele@windmill.it>
# All rights reserved.
#
# Author: Lele Forzani
#
# /etc/init.d/visdn
#   and its symbolic link
# /sbin/visdn
### BEGIN INIT INFO
# Provides:          visdn
# Required-Start:    $syslog
# Should-Start:
# Required-Stop:     $syslog
# Should-Stop:
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: vISDN Telephony Interface
# Description:       Starts vISDN Telephony Subsystem drivers
#	vISDN is an ISDN Subsystem for Linux
#
### END INIT INFO
# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance

VISDNCFG_BIN=/usr/sbin/visdn_configurator
test -x $VISDNCFG_BIN || { echo "$VISDNCFG_BIN not installed";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# Check for existence of needed config file and read it
VISDN_CONFIG=/etc/sysconfig/visdn
test -r $VISDN_CONFIG || { echo "$VISDN_CONFIG not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# Read config
. $VISDN_CONFIG

. /etc/rc.status

# Reset status of this service
rc_reset

# Check that telephony is up.
if [ "${TELEPHONY}" = "no" ]; then
        exit 0
fi

if [ "${DEBUG}" = "yes" ]; then
        ARGS="debug=1"
fi


case "$1" in
    start)
	echo -n "Starting vISDN Subsystem. "

	modprobe visdn-netdev
	modprobe visdn-streamport
	modprobe visdn-ppp
	modprobe visdn-timer-system
	modprobe visdn-ec

        # Load drivers
	echo
	echo -n "Loading visdn hardware modules: "

	for x in $MODULES; do
                if modprobe visdn_${x} ${ARGS} >& /dev/null; then
                        echo -n "$x "
                fi
        done
		i=0
                while [ ! -e /dev/zap/ctl ] && [ $i -lt 50 ]; do
                        echo -n .
                        : $((i++))
                        usleep 200000
                done
	echo
	echo  "Configuring visdn "
	$VISDNCFG_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down visdn hardware modules: "

        for x in $RMODULES; do
                if rmmod visdn_${x} >& /dev/null; then
                        echo -n "$x "
                fi
        done
	echo
	echo -n "Shutting down visdn Subsystem "

        rmmod visdn-ec
        rmmod visdn-timer-system
        rmmod visdn-ppp
        rmmod visdn-streamport
        rmmod visdn-netdev
	rmmod visdn_softcxc
	rmmod visdn_core

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	echo -n "Reload service zaptel "
	## if it supports it:

	$VISDNCFG_BIN
	rc_status -v

	## Otherwise:
	#$0 try-restart
	#rc_status
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	# If it supports signaling:
	echo -n "Reload service zaptel "
	$VISDNCFG_BIN
	rc_status -v

	## Otherwise if it does not support reload:
	#rc_failed 3
	#rc_status -v
	;;
    status)
	echo -n "Checking for service FOO "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

	# NOTE: checkproc returns LSB compliant status values.
	#checkproc $FOO_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    probe)
	## Optional: Probe for the necessity of a reload, print out the
	## argument to this init script which is required for a reload.
	## Note: probe is not (yet) part of LSB (as of 1.9)

	#test /etc/zaptel.conf -nt /var/run/FOO.pid && echo reload
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
