
* Good integration with the kernel

* Full support for "network terminator" role

Current drivers and the above architecture fully support acting as the network
terminator.

* D-channel sharing

More than one application can independently speak on the D-channel. This is
accomplished by assigning a different TEI to each open socket; the q.921
standard, in facts, provides for multiple TEIs to be assigned to a single TE.
The LAPD layer multiplexes frames to their respective socket, in a completely
transparent manner.

* (almost) completely unintrusive

vISDN is currently completely modular and does not require patches to kernel.
Modules can be compiled externally and inserted in any compatible kernel.

Of course, to accomplish a perfect integration, tiny modifications to the
kernel headers would be recomendable.

* Traffic analysis with Ethereal

vISDN supports packet(7) sniffing of frames. By applying very small
patches to libpcap and Ethereal you will be able to inspect LAPD and q.931
traffic in full detail. Ethereal already supports LAPD and q.931 dissecting,
the patch just enables it to receive LAPD traffic from vISDN interfaces.

Since interface role and frame direction are encoded in SLL header,
Ethereal is able to clearly show frame source/destination and to interpret
direction-dependant flags (C/R and P/F bits).

* E-channel sniffing
Basic rate ISDN interfaces support a so called E-channel. The E-channel is used
to detect collisions when transmitting towards the network on the D-channel.
The E-channel echoes everything begin transmited from other TEs to the network
so, it can be used to sniff frames not transmitted by us (which usually are not
visible).

All BRI vISDN drivers support E channel sniffing by putting the interface in
promiscuous mode. You are therefore able to fully sniff communications made by
other TEs.

